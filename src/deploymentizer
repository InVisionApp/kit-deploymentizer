#!/usr/bin/env node

var logger = require("log4js").getLogger();
var program = require("commander");
var packageJson = require("../package.json");
var Deploymentizer = require("./lib/deploymentizer");
var eventHandler = require("./util/event-handler");
var exit = process.exit;

var parseBoolean = function(str) {
	return (str === "true");
};

/**
 * Most values can be set in the conf file, specify here to override default or values from conf.
 * At least one of --load or --conf flags must be set.
 */
program
	.version(packageJson.version)
	.usage("[options]")
	.option("-c, --clean <boolean>", "Set if the output directory should be deleted and re-created before generating manifest files", parseBoolean, parseBoolean(process.env.CLEAN))
	.option("-s, --save <boolean>", "Sets if the generated manifest files are saved to the output diretory or not", parseBoolean, parseBoolean(process.env.SAVE))
	.option("-k, --conf <conf>", "Sets the configure file to load at start up", process.env.CONF)
	.option("-o, --output <output>", "Set output directory to write files to, overrides value from conf file", process.env.OUTPUT)
	.option("-l, --load <load>", "Set load directory to read from, overrides value from conf file", process.env.LOAD)
	.option("-p --plugin <plugin>", "Sets the Confguration plugin to use, overrides value from conf file", process.env.PLUGIN)
	.parse(process.argv)
;

var deploymentizer = new Deploymentizer({
	clean: program.clean,
	save: program.save,
	conf: program.conf,
	outputPath: program.output,
	loadPath: program.load,
	configPlugin: program.plugin
});

// Enable logging of all events from the deploymentizer
eventHandler.on(eventHandler.INFO, function(message) {
	logger.info(message);
});
eventHandler.on(eventHandler.WARN, function(message) {
	logger.warn(message);
});
eventHandler.on(eventHandler.FATAL, function(message) {
	logger.fatal(message);
});

// Run the generator
deploymentizer
	.process()
	.then(function() {
		exit(0);
	})
	.catch(function(err) {
		logger.fatal(err);
		throw new Error(err);
	})
	.done();
